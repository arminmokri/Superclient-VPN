#!/bin/bash

getUrlFile() { # url, file_path
    local url=$1
    local file_path=$2
    local res_str=$(echo "${url}" | wget -O "${file_path}" -qi - 2>/dev/null)
    local res_status=$?
    echo -n "${res_status}"
}

getUrlContent() { # url
    local url=$1
    local res_str=$(curl -s -k "${url}" 2>/dev/null)
    local res_status=$?
    echo -n "${res_str}"
}

base64Decode() { # data
    local data=$1
    local res_str=$(echo "${data}" | base64 -d | tr -d '\n' 2>/dev/null)
    local res_status=$?
    echo -n "${res_str}"
}

getUrlJson() { # url, json
    local url=$1
    local json=$2
    local url_content=$(getUrlContent $url)
    local res_str=$(echo "${url_content}" | jq -r "${json}" | tr -d '\n' 2>/dev/null)
    local res_status=$?
    echo -n "${res_str}"
}

getFileContent() { # path
    local path=$1
    local res_str=$(cat "${path}" | tr -d '\n' 2>/dev/null)
    local res_status=$?
    echo -n "${res_str}"
}

getFileSize() { # path
    local path=$1
    local res_str=$(stat -c %s "${path}" | tr -d '\n' 2>/dev/null)
    local res_status=$?
    echo -n "${res_str}"
}

getFileChecksum() { # path
    local path=$1
    local res_str=$(md5sum "${path}" | cut -d ' ' -f 1 | tr -d '\n' 2>/dev/null)
    local res_status=$?
    echo -n "${res_str}"
}

writeToFile() { # path, content
    local path=$1
    local content=$2
    local res_str=$(echo -n "${content}" > "${path}" 2>/dev/null)
    local res_status=$?
    echo -n "${res_status}"
}

getLatestFirmwareFilePath() { # firmware_dir_path, repo_name
    local firmware_dir_path=$1
    local repo_name=$2
    local res_str=$(find "${firmware_dir_path}" -maxdepth 1 -type f -name "${repo_name}*" | sort | tail -n 1 | tr -d '\n' 2>/dev/null)
    local res_status=$?
    echo -n "${res_str}"
}

removeDir() { # path
    local path=$1
    local res_str=$(rm -rf "${path}" >/dev/null 2>&1)
    local res_status=$?
    echo -n "${res_status}"
}

makeDir() { # path
    local path=$1
    if [[ ! -d "$path" ]]; then
        local res_str=$(mkdir -p $path >/dev/null 2>&1)
        local res_status=$?
    else
        local res_str="Dir Already Exist."
        local res_status=0
    fi
    echo -n "${res_status}"
}

gitCloneUrl() { # url, branch, path
    local url=$1
    local branch=$2
    local path=$3
    local res_str=$(git clone "${url}" --branch "${branch}" --single-branch "${path}" >/dev/null 2>&1)
    local res_status=$?
    echo -n "${res_status}"
}

tgzDir() { # input, output
    local input=$1
    local output=$2
    local res_str=$(cd "${input}" && tar -czvf "${output}" * && cd - >/dev/null 2>&1)
    local res_status=$?
    echo -n "${res_status}"
}

unTgzFile() { # input, output, include_file, exclude_file
    local input=$1
    local output=$2
    local include_file=$3
    local exclude_file=$4
    if [[ $include_file == "" ]]; then
        local res_str=$(tar -xzvf "${input}" -C "${output}" --exclude="${exclude_file}" >/dev/null 2>&1)
        local res_status=$?
    else
        local res_str=$(tar -xzvf "${input}" -C "${output}" --exclude="${exclude_file}" "${include_file}" >/dev/null 2>&1)
        local res_status=$?
    fi
    echo -n "${res_status}"
}

unpackFirmware() {
    local firmware_path=$1
    local unpack_firmware_path=$2
    local unpack_firmware_include=$3
    local unpack_firmware_exclude=$4
    res_makedir=$(makeDir "${unpack_firmware_path}")
    res_untgz=$(unTgzFile "${firmware_path}" "${unpack_firmware_path}" "${unpack_firmware_include}" "${unpack_firmware_exclude}")
    echo -n "${res_untgz}"
}

moveFile() { # input, output
    local input=$1
    local output=$2
    local res_str=$(mv "${input}" "${output}" >/dev/null 2>&1)
    local res_status=$?
    echo -n "${res_status}"
}

removeOlderFirmwares() { # firmware_dir_path, keep_file_name, remove_pattern_name
    local firmware_dir_path=$1
    local keep_file_name=$2
    local remove_pattern_name=$3
    local res_str=$(find "${firmware_dir_path}" -maxdepth 1 -type f -not -name "${keep_file_name}" -name "${remove_pattern_name}*" -delete >/dev/null 2>&1)
    local res_status=$?
    echo -n "${res_status}"
}

getRepoVersion() { # repo_version_url1, repo_version_url2
    local repo_version_url1=$1
    local repo_version_url2=$2
    local repo_version=""
    for run in {1..3}; do
        local data=$(getUrlJson "${repo_version_url1}" ".content")
        local repo_version=$(base64Decode "${data}")
        if [[ $repo_version == "" ]]; then
            local repo_version=$(getUrlContent "${repo_version_url2}")
        fi
        if [[ $repo_version != "" ]]; then
            break
        fi
    done
    echo -n "${repo_version}"
}

makeRepoFirmware() { # repo_url, repo_name, repo_branch, repo_version_url1, repo_version_url2, firmware_dir_path, tmp_dir_path
    local repo_url=$1
    local repo_name=$2
    local repo_branch=$3
    local repo_version_url1=$4
    local repo_version_url2=$5
    local firmware_dir_path=$6
    local tmp_dir_path=$7
    local res=""
    local repo_version=$(getRepoVersion "${repo_version_url1}" "${repo_version_url2}")
    if [[ $repo_version != "" ]]; then
        local tmp_dir_abs_path=$(pwd ${tmp_dir_path} | tr -d '\n')
        local git_dir="${tmp_dir_path}/${repo_name}"
        local tgz_file="${tmp_dir_abs_path}/${repo_name}.tgz"
        local firmware_file_name="${repo_name}___${repo_version}___latest"
        local firmware_file="${firmware_dir_path}/${firmware_file_name}"
        local res_rm=$(removeDir "${git_dir}")
        local res_git=$(gitCloneUrl "${repo_url}" "${repo_branch}" "${git_dir}")
        if [[ $res_git -eq 0 ]]; then
            local res_tgz=$(tgzDir "${git_dir}" "${tgz_file}")
            if [[ $res_tgz -eq 0 ]]; then
                local res_rm=$(removeDir "${git_dir}")
                local res_move=$(moveFile "${tgz_file}" ${firmware_file})
                if [[ $res_move -eq 0 ]]; then
                    local res_rm=$(removeDir "${tgz_file}")
                    local res_rm_firmwares=$(removeOlderFirmwares "${firmware_dir_path}" "${firmware_file_name}" "${repo_name}")
                    local res=${errorCode[noError]}
                else
                    local res_rm=$(removeDir "${tgz_file}")
                    local res_rm=$(removeDir "${firmware_file}")
                    local res=${errorCode[moveRepoFirmware]}
                fi
            else
                local res_rm=$(removeDir "${git_dir}")
                local res_rm=$(removeDir "${tgz_file}")
                local res=${errorCode[tgzRepoFirmware]}
            fi
        else
            local res_rm=$(removeDir "${git_dir}")
            local res=${errorCode[cloneRepoFirmware]}
        fi
    else
        local res=${errorCode[invalidVersionRepoFirmware]}
    fi
    echo -n "${res}"
}

getReleaseVersion() { # releases_url
    local releases_url=$1
    local release_version=""
    for run in {1..3}; do
        local release_version=$(getUrlJson "${releases_url}" ".name")
        if [[ $release_version != "" ]]; then
            break
        fi
    done
    echo -n "${release_version}"
}

makeReleaseFirmware() { # releases_url, repo_name, firmware_dir_path, tmp_dir_path
    local releases_url=$1
    local repo_name=$2
    local firmware_dir_path=$3
    local tmp_dir_path=$4
    local res=""
    local release_version=$(getReleaseVersion ${releases_url})
    if [[ $release_version != "" ]]; then
        local tgz_file_name="${repoName}.tgz"
        local tgz_file="${tmp_dir_path}/${tgz_file_name}"
        local firmware_file_name="${repo_name}___${release_version}___latest"
        local firmware_file="${firmware_dir_path}/${firmware_file_name}"

        local temp=$(getUrlJson "${releases_url}" '.assets[] | .browser_download_url + " " + (.size|tostring)')
        local temp=$(echo "${temp}" | grep "${tgz_file_name}" | tr -d '\n' 2>/dev/null)
        local url_download=$(echo "${temp}" | awk '{ print $1 }' | tr -d '\n');
        local size_download=$(echo "${temp}" | awk '{ print $2 }' | tr -d '\n');

        local temp=$(getUrlJson "${releases_url}" '.body')
        local temp=$(echo "${temp}" | grep "${tgz_file_name}" | cut -d ' ' -f 1 | tr -d '\n' 2>/dev/null)
        local checksum=$temp

        if [[ $url_download != "" ]] && [[ $size_download != "" ]] && [[ $checksum != "" ]]; then
            res_download=$(getUrlFile "${url_download}" "${tgz_file}")
            str_file_size=$(getFileSize "${tgz_file}")
            str_file_checksum=$(getFileChecksum "${tgz_file}")
            if [[ "$size_download" == "$str_file_size" ]] && [[ "$checksum" == "$str_file_checksum" ]] && [[ $res_download -eq 0 ]]; then
                local res_move=$(moveFile "${tgz_file}" ${firmware_file})
                if [[ $res_move -eq 0 ]]; then
                    local res_rm_firmwares=$(removeOlderFirmwares "${firmware_dir_path}" "${firmware_file_name}" "${repo_name}")
                    local res=${errorCode[noError]}
                else
                    local res_rm=$(removeDir "${tgz_file}")
                    local res_rm=$(removeDir "${firmware_file}")
                    local res=${errorCode[moveReleaseFirmware]}
                fi
            else
                local res_rm=$(removeDir "${tgz_file}")
                local res=${errorCode[downloadReleaseFirmware]}
            fi
        else
            local res=${errorCode[invalidUrlReleaseFirmware]}
        fi
    else
        local res=${errorCode[invalidVersionReleaseFirmware]}
    fi
}

# start
this_file_path=$(eval "realpath $0")
this_dir_path=$(eval "dirname $this_file_path")

# errorCode
declare -A errorCode
errorCode=( \
    [noError]="0"
    [invalidParameter]="1" \
    [invalidVersionRepoFirmware]="2" \
    [cloneRepoFirmware]="3" \
    [tgzRepoFirmware]="4" \
    [moveRepoFirmware]="5" \
    [invalidVersionReleaseFirmware]="6" \
    [invalidUrlReleaseFirmware]="7" \
    [downloadReleaseFirmware]="8" \
    [moveReleaseFirmware]="9" \
    [doNotNeedUpdate]="10" \
    [repoName]="11" \
    [firmwareNotFound]="12" \
    [unpackFirmware]="13" \
)

# parse Args
POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        --action)
            # init_repo / get_repo_version / update_repo
            # init_release / get_release_version / update_release
            # get_repo_name
            # get_latest_firmware
            # unpack_firmware
            action="$2"
            shift # past argument
            shift # past value
            ;;
        --repo-username)
            repoUsername="$2"
            shift # past argument
            shift # past value
            ;;
        --repo-username-path)
            repoUsernamePath="$2"
            shift # past argument
            shift # past value
            ;;
        --repo-name)
            repoName="$2"
            shift # past argument
            shift # past value
            ;;
        --repo-name-path)
            repoNamePath="$2"
            shift # past argument
            shift # past value
            ;;
        --repo-branch)
            repoBranch="$2"
            shift # past argument
            shift # past value
            ;;
        --repo-branch-path)
            repoBranchPath="$2"
            shift # past argument
            shift # past value
            ;;
        --repo-version-path)
            repoVersionPath="$2"
            shift # past argument
            shift # past value
            ;;
        --release-version-path)
            releaseVersionPath="$2"
            shift # past argument
            shift # past value
            ;;
        --firmware-dir-path)
            firmwareDirPath="$2"
            shift # past argument
            shift # past value
            ;;
        --tmp-dir-path)
            tmpDirPath="$2"
            shift # past argument
            shift # past value
            ;;
        --firmware-path)
            firmwarePath="$2"
            shift # past argument
            shift # past value
            ;;
        --unpack-firmware-path)
            unpackFirmwarePath="$2"
            shift # past argument
            shift # past value
            ;;
        --unpack-firmware-include)
            unpackFirmwareInclude="$2"
            shift # past argument
            shift # past value
            ;;
        --unpack-firmware-exclude)
            unpackFirmwareExclude="$2"
            shift # past argument
            shift # past value
            ;;
        -*|--*)
            echo "Unknown option $1"
            action=""
            break
            ;;
        *)
            POSITIONAL_ARGS+=("$1") # save positional arg
            shift # past argument
            ;;
    esac
done
set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

writeVars() {
    if [[ $repoUsernamePath != "" ]] && [[ $repoUsername != "" ]]; then
        res_write1=$(writeToFile "${repoUsernamePath}" "${repoUsername}")
    fi
    if [[ $repoNamePath != "" ]] && [[ $repoName != "" ]]; then
        res_write2=$(writeToFile "${repoNamePath}" "${repoName}")
    fi
    if [[ $repoBranchPath != "" ]] && [[ $repoBranch != "" ]]; then
        res_write3=$(writeToFile "${repoBranchPath}" "${repoBranch}")
    fi
}

readVars() {
    if [[ $repoUsernamePath != "" ]]; then
        repoUsername=$(getFileContent "${repoUsernamePath}")
    fi
    if [[ $repoNamePath != "" ]]; then
        repoName=$(getFileContent "${repoNamePath}")
    fi
    if [[ $repoBranchPath != "" ]]; then
        repoBranch=$(getFileContent "${repoBranchPath}")
    fi
}

initVars() {
    # github
    githubUrl="https://github.com"
    githubApiUrl="https://api.github.com"
    githubusercontentUrl="https://raw.githubusercontent.com"
    repoUrl="${githubUrl}/${repoUsername}/${repoName}"
    repoVersionUrl1="${githubApiUrl}/repos/${repoUsername}/${repoName}/contents/version?ref=${repoBranch}"
    repoVersionUrl2="${githubusercontentUrl}/${repoUsername}/${repoName}/${repoBranch}/version"
    releasesUrl="${githubApiUrl}/repos/${repoUsername}/${repoName}/releases/latest"
}

#
exit_code=0

# init_repo / get_repo_version / update_repo
# init_release / get_release_version / update_release
if [[ $action == "init_repo" ]]; then
    # --action init_repo --repo-username arminmokri --repo-username-path username --repo-name Superclient-VPN --repo-name-path name --repo-branch main --repo-branch-path branch --firmware-dir-path . --tmp-dir-path .
    #echo "init_repo"
    initVars
    writeVars
    res_make=$(makeRepoFirmware "${repoUrl}" "${repoName}" "${repoBranch}" "${repoVersionUrl1}" "${repoVersionUrl2}" "${firmwareDirPath}" "${tmpDirPath}")
    exit_code=$res_make
elif [[ $action == "get_repo_version" ]]; then
    # --action get_repo_version --repo-username-path username --repo-name-path name --repo-branch-path branch
    #echo "get_repo_version"
    readVars
    initVars
    repo_version=$(getRepoVersion "${repoVersionUrl1}" "${repoVersionUrl2}")
    if [[ $repo_version != "" ]]; then
        echo "${repo_version}"
        exit_code=${errorCode[noError]}
    else
        exit_code=${errorCode[invalidVersion]}
    fi
elif [[ $action == "update_repo" ]]; then
    # --action update_repo --repo-username-path username --repo-name-path name --repo-branch-path branch --firmware-dir-path . --tmp-dir-path . --repo-version-path ./version
    #echo "update_repo"
    readVars
    initVars
    current_version=$(getFileContent "${repoVersionPath}")
    repo_version=$(getRepoVersion "${repoVersionUrl1}" "${repoVersionUrl2}")
    if [[ $current_version != $repo_version ]]; then
        res_make=$(makeRepoFirmware "${repoUrl}" "${repoName}" "${repoBranch}" "${repoVersionUrl1}" "${repoVersionUrl2}" "${firmwareDirPath}" "${tmpDirPath}")
        exit_code=$res_make
    else
        exit_code=${errorCode[doNotNeedUpdate]}
    fi
elif [[ $action == "init_release" ]]; then
    # --action init_release --repo-username arminmokri --repo-username-path username --repo-name Superclient-VPN --repo-name-path name --firmware-dir-path . --tmp-dir-path .
    #echo "init_release"
    initVars
    writeVars
    res_make=$(makeReleaseFirmware "${releasesUrl}" "${repoName}" "${firmwareDirPath}" "${tmpDirPath}")
    exit_code=$res_make
elif [[ $action == "get_release_version" ]]; then
    # --action get_release_version --repo-username-path username --repo-name-path name
    #echo "get_release_version"
    readVars
    initVars
    repo_version=$(getReleaseVersion "${releasesUrl}")
    if [[ $repo_version != "" ]]; then
        echo "${repo_version}"
        exit_code=${errorCode[noError]}
    else
        exit_code=${errorCode[invalidVersion]}
    fi
elif [[ $action == "update_release" ]]; then
    # --action update_release --repo-username-path username --repo-name-path name --firmware-dir-path . --tmp-dir-path . --release-version-path ./releases
    #echo "update_release"
    readVars
    initVars
    current_version=$(getFileContent "${releaseVersionPath}")
    release_version=$(getReleaseVersion "${releasesUrl}")
    if [[ $current_version != $release_version ]]; then
        res_make=$(makeReleaseFirmware "${releasesUrl}" "${repoName}" "${firmwareDirPath}" "${tmpDirPath}")
        exit_code=$res_make
    else
        exit_code=${errorCode[doNotNeedUpdate]}
    fi
elif [[ $action == "get_repo_name" ]]; then
    # --action get_repo_name --repo-name-path name
    #echo "get_repo_name"
    readVars
    initVars
    if [[ $repoName != "" ]]; then
        echo $repoName
        exit_code=${errorCode[noError]}
    else
        exit_code=${errorCode[repoName]}
    fi

elif [[ $action == "get_latest_firmware" ]]; then
    # --action get_latest_firmware --repo-name-path name --firmware-dir-path .
    #echo "get_latest_firmware"
    readVars
    initVars
    latest_firmware=$(getLatestFirmwareFilePath "${firmwareDirPath}" "${repoName}")
    if [[ $latest_firmware != "" ]] && [[ -f "$latest_firmware" ]]; then
        echo $latest_firmware
        exit_code=${errorCode[noError]}
    else
        exit_code=${errorCode[firmwareNotFound]}
    fi
elif [[ $action == "unpack_firmware" ]]; then
    # --action unpack_firmware --firmware-path ./Superclient-VPN___v1.0.0___latest --unpack-firmware-path memory/ --unpack-firmware-include os --unpack-firmware-exclude os
    #echo "unpack_firmware"
    res_unpack=$(unpackFirmware "${firmwarePath}" "${unpackFirmwarePath}" "${unpackFirmwareInclude}" "${unpackFirmwareExclude}")
    if [[ $res_unpack -eq 0 ]]; then
        exit_code=${errorCode[noError]}
    else
        exit_code=${errorCode[unpackFirmware]}
    fi
elif [[ $action == "unpack_latest_firmware" ]]; then
    # --action unpack_latest_firmware -repo-name-path name --firmware-dir-path . --unpack-firmware-path memory/ --unpack-firmware-include os --unpack-firmware-exclude os
    #echo "unpack_latest_firmware"
    readVars
    initVars
    latest_firmware=$(getLatestFirmwareFilePath "${firmwareDirPath}" "${repoName}")
    if [[ $latest_firmware != "" ]] && [[ -f "$latest_firmware" ]]; then
        res_unpack=$(unpackFirmware "${latest_firmware}" "${unpackFirmwarePath}" "${unpackFirmwareInclude}" "${unpackFirmwareExclude}")
        if [[ $res_unpack -eq 0 ]]; then
            exit_code=${errorCode[noError]}
        else
            exit_code=${errorCode[unpackFirmware]}
        fi
        exit_code=${errorCode[noError]}
    else
        exit_code=${errorCode[firmwareNotFound]}
    fi
else
    echo "Invalid Parameter"
    exit_code=${errorCode[invalidParameter]}
fi

exit $exit_code
